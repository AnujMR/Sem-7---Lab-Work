# -*- coding: utf-8 -*-
"""22102A2003_LAB_PS1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i8xNsX9I36fhpnKS14Sx5UtJOICDFCyr

*   Name : Anuj Ramane
*   Roll No. : 22102A2003
*   Div : TE CMPN-A
---

#**ML LAB Problem Statment 1 : Predicting Housing Prices Using Linear Regression**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/housing.csv")
df

df.info()

df.columns

df.shape

df.describe()

"""# **Handling Missing Values**"""

df.isnull().sum()

# Showing missing data with heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df.isna().transpose());

# We can fill them with Mean value
df.total_bedrooms.fillna(df.total_bedrooms.mean(), inplace=True)
df.isnull().sum()

# Checking for duplicates
df.duplicated().sum()

"""# **Handling Outliers**"""

# Checking for outliers
df.plot(kind='box', subplots=True, layout=(3,3), figsize=(15,7))
plt.show()

# Removing data bigger than 90% of column
df=df[df['total_rooms']<df['total_rooms'].quantile(0.9)]
df=df[df['total_bedrooms']<df['total_bedrooms'].quantile(0.9)]
df=df[df['population']<df['population'].quantile(0.9)]
df=df[df['households']<df['households'].quantile(0.9)]
df=df[df['median_income']<df['median_income'].quantile(0.9)]

df.plot(kind='box', subplots=True, layout=(3,3), figsize=(15,7))
plt.show()

"""# **EDA**"""

df.hist(bins=25,figsize=(20,10));

# Checking scatter plot between median_income and median_house_value
plt.figure(figsize=(10,5))
plt.scatter(df["median_income"],df["median_house_value"], alpha=0.2)
plt.xlabel('Median income')
plt.ylabel('Median house value')
plt.title('Linear correlation Median income/Median House value')

sns.set()
plt.figure(figsize=(10,8))
plt.scatter('longitude','latitude',data=df)
plt.ylabel('Latitudes')
plt.xlabel('Longitudes')
plt.title('Geographical plot of Lats/Lons')
plt.show()

"""# **Encoding Categorical Variables**"""

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
df["ocean_proximity"] = le.fit_transform(df["ocean_proximity"])
df.info()

#visualize the correlation
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True)

"""# **Dropping Unused columns and Target Column**"""

Y = df["median_house_value"]
X = df.drop(["longitude", "latitude", "median_house_value"], axis = 1)

"""# **Spliting Data in Training and Testing**"""

from sklearn.model_selection import train_test_split
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size= 0.20, random_state=42)

# Performing Data Scaling using Robust Scaler
from sklearn.preprocessing import RobustScaler
rs = RobustScaler()
X_Train = rs.fit_transform(X_Train)
X_Test = rs.fit_transform(X_Test)

"""# **Linear Regression Model**"""

from sklearn import linear_model

lr = linear_model.LinearRegression()
lr.fit(X_Train, Y_Train)

lr.score(X_Train, Y_Train)

lr.score(X_Test, Y_Test)

Y_Pred1 = lr.predict(X_Test)
Y_Test_Pred = pd.DataFrame({"Y_Test": Y_Test, "Y_Pred": Y_Pred1})
Y_Test_Pred.head()

Y_Test_Pred = Y_Test_Pred.reset_index()

plt.figure(figsize=(10, 8))
Y_Test_Pred = Y_Test_Pred.drop(["index"], axis=1)
plt.plot(Y_Test_Pred[:50])
plt.legend(["Actual", "Predicted"])

"""# **R-Square**"""

from sklearn.metrics import r2_score
reg_score = r2_score(Y_Test , Y_Pred1)
reg_score

#adjusted r2
p = len(X_Train[0])
n = len(Y_Train)
adj_R2 = 1-(1-reg_score)*(n-1)/(n-p-1)
adj_R2

"""# **MSE & MAE**"""

from sklearn.metrics import mean_absolute_error , mean_absolute_percentage_error , mean_squared_error

mse = mean_squared_error(Y_Test , Y_Pred1)
print("mse: ", mse)
mae = mean_absolute_error(Y_Test , Y_Pred1)
print("mae: ", mae)
mape = mean_absolute_percentage_error(Y_Test , Y_Pred1)
print("mape: ", mape)

"""# **User Input for Predicting House Price**"""

import numpy as np
import ipywidgets as widgets
from IPython.display import display

housing_median_age_input = widgets.FloatText(description="Housing Median Age:")
total_rooms_input = widgets.FloatText(description="Total Rooms:")
total_bedrooms_input = widgets.FloatText(description="Total Bedrooms:")
population_input = widgets.FloatText(description="Population:")
households_input = widgets.FloatText(description="Households:")
median_income_input = widgets.FloatText(description="Median Income:")
ocean_proximity_input = widgets.Dropdown(
    options=[0, 1, 2, 3, 4],
    description="Ocean Proximity:",
)

predict_button = widgets.Button(description="Predict")

# Display the input widgets
display(housing_median_age_input,
        total_rooms_input, total_bedrooms_input, population_input,
        households_input, median_income_input, ocean_proximity_input,
        predict_button)

def predict_house_price(sender):
    input_data = np.array([[
        housing_median_age_input.value,
        total_rooms_input.value,
        total_bedrooms_input.value,
        population_input.value,
        households_input.value,
        median_income_input.value,
        ocean_proximity_input.value
    ]])

    input_data_scaled = rs.transform(input_data)

    prediction = lr.predict(input_data_scaled)

    print("Predicted House Price:", prediction[0])

predict_button.on_click(predict_house_price)